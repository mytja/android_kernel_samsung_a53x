/*
 * Samsung Exynos5 SoC series FIMC-IS OIS driver
 *
 * exynos5 fimc-is core functions
 *
 * Copyright (c) 2011 Samsung Electronics Co., Ltd
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License version 2 as
 * published by the Free Software Foundation.
 */

#ifndef IS_MCU_H
#define IS_MCU_H

struct sysboot_info_type {
	u32 ver;
	u32 id;
};

struct sysboot_erase_param_type {
	u32 page;
	u32 count;
};

enum GPIO_PinState {
	GPIO_PIN_RESET = 0,
	GPIO_PIN_SET
};

/* Utility MACROs */

#ifndef NTOHL
#define NTOHL(x)	((((x) & 0xFF000000U) >> 24) | \
				(((x) & 0x00FF0000U) >>  8) | \
				(((x) & 0x0000FF00U) <<  8) | \
				(((x) & 0x000000FFU) << 24))
#endif
#ifndef HTONL
#define HTONL(x)                        NTOHL(x)
#endif

#ifndef NTOHS
#define NTOHS(x)                        (((x >> 8) & 0x00FF) | ((x << 8) & 0xFF00))
#endif
#ifndef HTONS
#define HTONS(x)                        NTOHS(x)
#endif

#define	FIMC_MCU_FW_NAME		"is_fw_mcu.bin"
#define	FW_TRANS_SIZE			256
#define	OIS_BIN_LEN				45056
#define	FW_RELEASE_YEAR		0
#define	FW_RELEASE_MONTH		1
#define	FW_RELEASE_COUNT		2

#define	FW_DRIVER_IC			0
#define	FW_GYRO_SENSOR			1
#define	FW_MODULE_TYPE		2
#define	FW_PROJECT				3
#define	FW_CORE_VERSION		4

#define	OIS_MEM_STATUS_RETRY	6
#define	POSITION_NUM			512
#define	AF_BOUNDARY			(1 << 6)

#define	BOOT_I2C_SYNC_RETRY_COUNT       (3)
#define	BOOT_I2C_SYNC_RETRY_INTVL       (50)
#define	BOOT_NRST_PULSE_INTVL           (2) /* msec */

#define	BOOT_I2C_CMD_GET                (0x00)
#define	BOOT_I2C_CMD_GET_VER            (0x01)
#define	BOOT_I2C_CMD_GET_ID             (0x02)
#define	BOOT_I2C_CMD_READ               (0x11)
#define	BOOT_I2C_CMD_WRITE              (0x31)
#define	BOOT_I2C_CMD_ERASE              (0x44)
#define	BOOT_I2C_CMD_GO                 (0x21)
#define	BOOT_I2C_CMD_WRITE_UNPROTECT    (0x73)
#define	BOOT_I2C_CMD_READ_UNPROTECT     (0x92)

#define	BOOT_I2C_RESP_ACK               (0x79)
#define	BOOT_I2C_RESP_NACK              (0x1F)
#define	BOOT_I2C_RESP_BUSY              (0x76)

#define	BOOT_I2C_RESP_GET_VER_LEN       (0x01) /* bootloader version(1) */
#define	BOOT_I2C_RESP_GET_ID_LEN        (0x03) /* number of bytes - 1(1) + product ID(2) */

/* Flash memory characteristics from target datasheet (msec unit) */
#define	FLASH_PROG_TIME			37 /* per page or sector */
#define	FLASH_FULL_ERASE_TIME	(40 * 32) /* 2K erase time(40ms) * 32 pages */
#define	FLASH_PAGE_ERASE_TIME	36 /* per page or sector */

#define	BOOT_I2C_CMD_TMOUT              (30)
#define	BOOT_I2C_WRITE_TMOUT            (FLASH_PROG_TIME)
#define	BOOT_I2C_FULL_ERASE_TMOUT       (FLASH_FULL_ERASE_TIME)
#define	BOOT_I2C_PAGE_ERASE_TMOUT(n)    (FLASH_PAGE_ERASE_TIME * n)
#define	BOOT_I2C_WAIT_RESP_TMOUT        (30)
#define	BOOT_I2C_WAIT_RESP_POLL_TMOUT   (500)
#define	BOOT_I2C_WAIT_RESP_POLL_INTVL   (3)
#define	BOOT_I2C_WAIT_RESP_POLL_RETRY   (BOOT_I2C_WAIT_RESP_POLL_TMOUT / BOOT_I2C_WAIT_RESP_POLL_INTVL)
#define	BOOT_I2C_XMIT_TMOUT(count)      (5 + (1 * count))
#define	BOOT_I2C_RECV_TMOUT(count)      BOOT_I2C_XMIT_TMOUT(count)

#define	BOOT_I2C_MAX_WRITE_LEN          (256)  /* Protocol limitation */
#define	BOOT_I2C_MAX_ERASE_PARAM_LEN    (4096) /* In case of erase parameter with 2048 pages */
#define	BOOT_I2C_MAX_PAYLOAD_LEN        (BOOT_I2C_MAX_ERASE_PARAM_LEN) /* Larger one between write and erase., */

#if IS_ENABLED(USE_OIS_GYRO_TDK_ICM_42632M)
#define	OIS_GYRO_SCALE_FACTOR	131
#else	/* LSM6DSO */
#define	OIS_GYRO_SCALE_FACTOR	114
#endif

#define	MAX_GYRO_EFS_DATA_LENGTH	30

/* Memory map specific */
struct sysboot_page_type {
	u32 size;
	u32 count;
};

struct sysboot_map_type {
	u32 flashbase;  /* flash memory starting address */
	u32 sysboot;    /* system memory starting address */
	u32 optionbyte; /* option byte starting address */
	struct sysboot_page_type *pages;
};

enum{
	eBIG_ENDIAN = 0, // big endian
	eLIT_ENDIAN = 1  // little endian
};

enum is_ois_power_mode {
	OIS_POWER_MODE_SINGLE = 0,
	OIS_POWER_MODE_DUAL,
};

struct mcu_default_data {
	u32 ois_gyro_list[5];
	u32 ois_gyro_list_len;
	u32 aperture_delay_list[2];
	u32 aperture_delay_list_len;
};

struct is_reg_format {
	u32 offset;
	char *reg_name;
};

enum is_ois_reg {
	R_OIS_CMD_START = 0,
	R_OIS_CMD_STATUS,
	R_OIS_CMD_MODE,
	R_OIS_CMD_WRITE_DATA,
	R_OIS_CMD_ERROR_STATUS,
	R_OIS_CMD_CHECKSUM,
	R_OIS_CMD_READ_STATUS,
	R_OIS_CMD_GYRO_CAL,
	R_OIS_CMD_SINE_1,
	R_OIS_CMD_SINE_2,
	R_OIS_CMD_SINE_3,
	R_OIS_CMD_CENTER_X1,
	R_OIS_CMD_CENTER_X2,
	R_OIS_CMD_CENTER_Y1,
	R_OIS_CMD_CENTER_Y2,
	R_OIS_CMD_READ_WRITE_RESULT,
	R_OIS_CMD_BYPASS_CTRL,
	R_OIS_CMD_SET_GYRO_NOISE,
	R_OIS_CMD_SVDIS_CTRL,
	R_OIS_CMD_DEVCTRL,
	R_OIS_CMD_GYRO_SLEEP,
	R_OIS_CMD_TAMODE,
	R_OIS_CMD_CACTRL_WRITE,
	R_OIS_CMD_REAR_AF,
	R_OIS_CMD_REAR2_AF,
	R_OIS_CMD_POS1_REAR2_AF,
	R_OIS_CMD_POS2_REAR2_AF,
	R_OIS_CMD_POS1_REAR3_AF,
	R_OIS_CMD_POS2_REAR3_AF,
	R_OIS_CMD_REAR3_AF,
	R_OIS_CMD_MCERR_W,
	R_OIS_CMD_MCERR_W2,
	R_OIS_CMD_THRESH_ERR_LEV_M3,
	R_OIS_CMD_START_WAVE_CHECK,
	R_OIS_CMD_AUTO_TEST_RESULT,
	R_OIS_CMD_THRESH_ERR_LEV,
	R_OIS_CMD_ERR_VAL_CNT,
	R_OIS_CMD_FREQ_LEV,
	R_OIS_CMD_AMPLI_LEV,
	R_OIS_CMD_DUM_PULSE,
	R_OIS_CMD_VYVLE_LEV,
	R_OIS_CMD_THRESH_ERR_LEV_M2,
	R_OIS_CMD_SET_COEF,
	R_OIS_CMD_CTRL_AF,
	R_OIS_CMD_VDR_VERSION,
	R_OIS_CMD_FWINFO_CTRL,
	R_OIS_CMD_TARGET_POS_REAR_X,
	R_OIS_CMD_TARGET_POS_REAR_X2,
	R_OIS_CMD_TARGET_POS_REAR_Y,
	R_OIS_CMD_TARGET_POS_REAR_Y2,
	R_OIS_CMD_HALL_POS_REAR_X,
	R_OIS_CMD_HALL_POS_REAR_X2,
	R_OIS_CMD_HALL_POS_REAR_Y,
	R_OIS_CMD_HALL_POS_REAR_Y2,
	R_OIS_CMD_TARGET_POS_REAR3_X,
	R_OIS_CMD_TARGET_POS_REAR3_X2,
	R_OIS_CMD_TARGET_POS_REAR3_Y,
	R_OIS_CMD_TARGET_POS_REAR3_Y2,
	R_OIS_CMD_HALL_POS_REAR3_X,
	R_OIS_CMD_HALL_POS_REAR3_X2,
	R_OIS_CMD_HALL_POS_REAR3_Y,
	R_OIS_CMD_HALL_POS_REAR3_Y2,
	R_OIS_CMD_TARGET_POS_REAR2_X,
	R_OIS_CMD_TARGET_POS_REAR2_X2,
	R_OIS_CMD_TARGET_POS_REAR2_Y,
	R_OIS_CMD_TARGET_POS_REAR2_Y2,
	R_OIS_CMD_HALL_POS_REAR2_X,
	R_OIS_CMD_HALL_POS_REAR2_X2,
	R_OIS_CMD_HALL_POS_REAR2_Y,
	R_OIS_CMD_HALL_POS_REAR2_Y2,
	R_OIS_CMD_OIS_SEL,
	R_OIS_CMD_REAR_SINX_COUNT1,
	R_OIS_CMD_REAR_SINX_COUNT2,
	R_OIS_CMD_REAR_SINY_COUNT1,
	R_OIS_CMD_REAR_SINY_COUNT2,
	R_OIS_CMD_REAR_SINX_DIFF1,
	R_OIS_CMD_REAR_SINX_DIFF2,
	R_OIS_CMD_REAR_SINY_DIFF1,
	R_OIS_CMD_REAR_SINY_DIFF2,
	R_OIS_CMD_REAR3_SINX_COUNT1,
	R_OIS_CMD_REAR3_SINX_COUNT2,
	R_OIS_CMD_REAR3_SINY_COUNT1,
	R_OIS_CMD_REAR3_SINY_COUNT2,
	R_OIS_CMD_REAR3_SINX_DIFF1,
	R_OIS_CMD_REAR3_SINX_DIFF2,
	R_OIS_CMD_REAR3_SINY_DIFF1,
	R_OIS_CMD_REAR3_SINY_DIFF2,
	R_OIS_CMD_REAR2_SINX_COUNT1,
	R_OIS_CMD_REAR2_SINX_COUNT2,
	R_OIS_CMD_REAR2_SINY_COUNT1,
	R_OIS_CMD_REAR2_SINY_COUNT2,
	R_OIS_CMD_REAR2_SINX_DIFF1,
	R_OIS_CMD_REAR2_SINX_DIFF2,
	R_OIS_CMD_REAR2_SINY_DIFF1,
	R_OIS_CMD_REAR2_SINY_DIFF2,
	R_OIS_CMD_GYRO_VAL_X,
	R_OIS_CMD_GYRO_LOG_X,
	R_OIS_CMD_GYRO_VAL_Y,
	R_OIS_CMD_GYRO_LOG_Y,
	R_OIS_CMD_GYRO_VAL_Z,
	R_OIS_CMD_GYRO_LOG_Z,
	R_OIS_CMD_HW_VERSION,
	R_OIS_CMD_BYPASS_DEVICE_ID1,
	R_OIS_CMD_BYPASS_DEVICE_ID2,
	R_OIS_CMD_BYPASS_REG_ADD1,
	R_OIS_CMD_BYPASS_REG_ADD2,
	R_OIS_CMD_BYPASS_REG_SIZE,
	R_OIS_CMD_BYPASS_DATA_SIZE,
	R_OIS_CMD_BYPASS_DATA_TRANSFER,
	R_OIS_CMD_BYPASS_DATA_TRANSFER2,
	R_OIS_CMD_FADE_UP1,
	R_OIS_CMD_FADE_UP2,
	R_OIS_CMD_FADE_DOWN1,
	R_OIS_CMD_FADE_DOWN2,
	R_OIS_CMD_GYRO_POLA_X,
	R_OIS_CMD_GYRO_POLA_Y,
	R_OIS_CMD_GYRO_ORIENT,
	R_OIS_CMD_RAW_DEBUG_X1,
	R_OIS_CMD_RAW_DEBUG_X2,
	R_OIS_CMD_RAW_DEBUG_Y1,
	R_OIS_CMD_RAW_DEBUG_Y2,
	R_OIS_CMD_RAW_DEBUG_Z1,
	R_OIS_CMD_RAW_DEBUG_Z2,
	R_OIS_CMD_READ_GYRO_NOISE_X1,
	R_OIS_CMD_READ_GYRO_NOISE_X2,
	R_OIS_CMD_READ_GYRO_NOISE_Y1,
	R_OIS_CMD_READ_GYRO_NOISE_Y2,
	R_OIS_CMD_REAR_XGG1,
	R_OIS_CMD_REAR_XGG2,
	R_OIS_CMD_REAR_XGG3,
	R_OIS_CMD_REAR_XGG4,
	R_OIS_CMD_REAR_YGG1,
	R_OIS_CMD_REAR_YGG2,
	R_OIS_CMD_REAR_YGG3,
	R_OIS_CMD_REAR_YGG4,
	R_OIS_CMD_ANGLE_COMP1,
	R_OIS_CMD_ANGLE_COMP2,
	R_OIS_CMD_ANGLE_COMP3,
	R_OIS_CMD_ANGLE_COMP4,
	R_OIS_CMD_ANGLE_COMP5,
	R_OIS_CMD_ANGLE_COMP6,
	R_OIS_CMD_ANGLE_COMP7,
	R_OIS_CMD_ANGLE_COMP8,
	R_OIS_CMD_ENABLE_DUALCAL,
	R_OIS_CMD_XCOEF_M1_1,
	R_OIS_CMD_XCOEF_M1_2,
	R_OIS_CMD_YCOEF_M1_1,
	R_OIS_CMD_YCOEF_M1_2,
	R_OIS_CMD_XCOEF_M2_1,
	R_OIS_CMD_XCOEF_M2_2,
	R_OIS_CMD_YCOEF_M2_1,
	R_OIS_CMD_YCOEF_M2_2,
	R_OIS_CMD_XCOEF_M3_1,
	R_OIS_CMD_XCOEF_M3_2,
	R_OIS_CMD_YCOEF_M3_1,
	R_OIS_CMD_YCOEF_M3_2,
	R_OIS_CMD_REAR3_XGG1,
	R_OIS_CMD_REAR3_XGG2,
	R_OIS_CMD_REAR3_XGG3,
	R_OIS_CMD_REAR3_XGG4,
	R_OIS_CMD_REAR3_YGG1,
	R_OIS_CMD_REAR3_YGG2,
	R_OIS_CMD_REAR3_YGG3,
	R_OIS_CMD_REAR3_YGG4,
	R_OIS_CMD_GYRO_POLA_X_M3,
	R_OIS_CMD_GYRO_POLA_Y_M3,
	R_OIS_CMD_HALL_VALID_NUMBER,
	R_OIS_CMD_GYRO_POLA_X_M2,
	R_OIS_CMD_GYRO_POLA_Y_M2,
	R_OIS_CMD_REAR2_XGG1,
	R_OIS_CMD_REAR2_XGG2,
	R_OIS_CMD_REAR2_XGG3,
	R_OIS_CMD_REAR2_XGG4,
	R_OIS_CMD_REAR2_YGG1,
	R_OIS_CMD_REAR2_YGG2,
	R_OIS_CMD_REAR2_YGG3,
	R_OIS_CMD_REAR2_YGG4,
	R_OIS_CMD_VDIS_TIME_STAMP_1,
	R_OIS_CMD_VDIS_TIME_STAMP_2,
	R_OIS_CMD_VDIS_TIME_STAMP_3,
	R_OIS_CMD_VDIS_TIME_STAMP_4,
	R_OIS_CMD_VDIS_X1_ANGVEL_1,
	R_OIS_CMD_VDIS_X1_ANGVEL_2,
	R_OIS_CMD_VDIS_Y1_ANGVEL_1,
	R_OIS_CMD_VDIS_Y1_ANGVEL_2,
	R_OIS_CMD_VDIS_Z1_ANGVEL_1,
	R_OIS_CMD_VDIS_Z1_ANGVEL_2,
	R_OIS_CMD_VDIS_X2_ANGVEL_1,
	R_OIS_CMD_VDIS_X2_ANGVEL_2,
	R_OIS_CMD_VDIS_Y2_ANGVEL_1,
	R_OIS_CMD_VDIS_Y2_ANGVEL_2,
	R_OIS_CMD_VDIS_Z2_ANGVEL_1,
	R_OIS_CMD_VDIS_Z2_ANGVEL_2,
	R_OIS_CMD_VDIS_X3_ANGVEL_1,
	R_OIS_CMD_VDIS_X3_ANGVEL_2,
	R_OIS_CMD_VDIS_Y3_ANGVEL_1,
	R_OIS_CMD_VDIS_Y3_ANGVEL_2,
	R_OIS_CMD_VDIS_Z3_ANGVEL_1,
	R_OIS_CMD_VDIS_Z3_ANGVEL_2,
	R_OIS_CMD_VDIS_X4_ANGVEL_1,
	R_OIS_CMD_VDIS_X4_ANGVEL_2,
	R_OIS_CMD_VDIS_Y4_ANGVEL_1,
	R_OIS_CMD_VDIS_Y4_ANGVEL_2,
	R_OIS_CMD_VDIS_Z4_ANGVEL_1,
	R_OIS_CMD_VDIS_Z4_ANGVEL_2,
	R_OIS_REG_MAX,
};

static const struct is_reg_format ois_mcu_regs[R_OIS_REG_MAX] = {
	{0x0, "OIS_CMD_START"},
	{0x1, "OIS_CMD_STATUS"},
	{0x2, "OIS_CMD_MODE"},
	{0x3, "OIS_CMD_WRITE_DATA"},
	{0x4, "OIS_CMD_ERROR_STATUS"},
	{0x5, "OIS_CMD_CHECKSUM"},
	{0x6, "OIS_CMD_READ_STATUS"},
	{0x14, "OIS_CMD_GYRO_CAL"},
	{0x18, "OIS_CMD_SINE_1"},
	{0x19, "OIS_CMD_SINE_2"},
	{0x1A, "OIS_CMD_SINE_3"},
	{0x22, "OIS_CMD_CENTER_X1"},
	{0x23, "OIS_CMD_CENTER_X2"},
	{0x24, "OIS_CMD_CENTER_Y1"},
	{0x25, "OIS_CMD_CENTER_Y2"},
	{0x27, "OIS_CMD_READ_WRITE_RESULT"},
	{0x28, "OIS_CMD_BYPASS_CTRL"},
	{0x29, "OIS_CMD_SET_GYRO_NOISE"},
	{0x2A, "OIS_CMD_SVDIS_CTRL"},
	{0x2E, "OIS_CMD_DEVCTRL"},
	{0x30, "OIS_CMD_GYRO_SLEEP"},
	{0x35, "OIS_CMD_TAMODE"},
	{0x39, "OIS_CMD_CACTRL_WRITE"},
	{0x3A, "OIS_CMD_REAR_AF"},
	{0x3B, "OIS_CMD_REAR2_AF"},
	{0x3E, "OIS_CMD_POS1_REAR2_AF"},
	{0x3F, "OIS_CMD_POS2_REAR2_AF"},
	{0x44, "OIS_CMD_POS1_REAR3_AF"},
	{0x45, "OIS_CMD_POS2_REAR3_AF"},
	{0x48, "OIS_CMD_REAR3_AF"},
	{0x4C, "OIS_CMD_MCERR_W"},
	{0x4D, "OIS_CMD_MCERR_W2"},
	{0x4E, "OIS_CMD_THRESH_ERR_LEV_M3"},
	{0x50, "OIS_CMD_START_WAVE_CHECK"},
	{0x51, "OIS_CMD_AUTO_TEST_RESULT"},
	{0x52, "OIS_CMD_THRESH_ERR_LEV"},
	{0x53, "OIS_CMD_ERR_VAL_CNT"},
	{0x54, "OIS_CMD_FREQ_LEV"},
	{0x55, "OIS_CMD_AMPLI_LEV"},
	{0x56, "OIS_CMD_DUM_PULSE"},
	{0x57, "OIS_CMD_VYVLE_LEV"},
	{0x5B, "OIS_CMD_THRESH_ERR_LEV_M2"},
	{0x5E, "OIS_CMD_SET_COEF"},
	{0x60, "OIS_CMD_CTRL_AF"},
	{0x7C, "OIS_CMD_VDR_VERSION"},
	{0x80, "OIS_CMD_FWINFO_CTRL"},
	{0x86, "OIS_CMD_TARGET_POS_REAR_X"},
	{0x87, "OIS_CMD_TARGET_POS_REAR_X2"},
	{0x88, "OIS_CMD_TARGET_POS_REAR_Y"},
	{0x89, "OIS_CMD_TARGET_POS_REAR_Y2"},
	{0x8E, "OIS_CMD_HALL_POS_REAR_X"},
	{0x8F, "OIS_CMD_HALL_POS_REAR_X2"},
	{0x90, "OIS_CMD_HALL_POS_REAR_Y"},
	{0x91, "OIS_CMD_HALL_POS_REAR_Y2"},
	{0x9E, "OIS_CMD_TARGET_POS_REAR3_X"},
	{0x9F, "OIS_CMD_TARGET_POS_REAR3_X2"},
	{0xA0, "OIS_CMD_TARGET_POS_REAR3_Y"},
	{0xA1, "OIS_CMD_TARGET_POS_REAR3_Y2"},
	{0xA6, "OIS_CMD_HALL_POS_REAR3_X"},
	{0xA7, "OIS_CMD_HALL_POS_REAR3_X2"},
	{0xA8, "OIS_CMD_HALL_POS_REAR3_Y"},
	{0xA9, "OIS_CMD_HALL_POS_REAR3_Y2"},
	{0xAC, "OIS_CMD_TARGET_POS_REAR2_X"},
	{0xAD, "OIS_CMD_TARGET_POS_REAR2_X2"},
	{0xAE, "OIS_CMD_TARGET_POS_REAR2_Y"},
	{0xAF, "OIS_CMD_TARGET_POS_REAR2_Y2"},
	{0xB4, "OIS_CMD_HALL_POS_REAR2_X"},
	{0xB5, "OIS_CMD_HALL_POS_REAR2_X2"},
	{0xB6, "OIS_CMD_HALL_POS_REAR2_Y"},
	{0xB7, "OIS_CMD_HALL_POS_REAR2_Y2"},
	{0xBE, "OIS_CMD_OIS_SEL"},
	{0xC0, "OIS_CMD_REAR_SINX_COUNT1"},
	{0xC1, "OIS_CMD_REAR_SINX_COUNT2"},
	{0xC2, "OIS_CMD_REAR_SINY_COUNT1"},
	{0xC3, "OIS_CMD_REAR_SINY_COUNT2"},
	{0xC4, "OIS_CMD_REAR_SINX_DIFF1"},
	{0xC5, "OIS_CMD_REAR_SINX_DIFF2"},
	{0xC6, "OIS_CMD_REAR_SINY_DIFF1"},
	{0xC7, "OIS_CMD_REAR_SINY_DIFF2"},
	{0xD8, "OIS_CMD_REAR3_SINX_COUNT1"},
	{0xD9, "OIS_CMD_REAR3_SINX_COUNT2"},
	{0xDA, "OIS_CMD_REAR3_SINY_COUNT1"},
	{0xDB, "OIS_CMD_REAR3_SINY_COUNT2"},
	{0xDC, "OIS_CMD_REAR3_SINX_DIFF1"},
	{0xDD, "OIS_CMD_REAR3_SINX_DIFF2"},
	{0xDE, "OIS_CMD_REAR3_SINY_DIFF1"},
	{0xDF, "OIS_CMD_REAR3_SINY_DIFF2"},
	{0xE4, "OIS_CMD_REAR2_SINX_COUNT1"},
	{0xE5, "OIS_CMD_REAR2_SINX_COUNT2"},
	{0xE6, "OIS_CMD_REAR2_SINY_COUNT1"},
	{0xE7, "OIS_CMD_REAR2_SINY_COUNT2"},
	{0xE8, "OIS_CMD_REAR2_SINX_DIFF1"},
	{0xE9, "OIS_CMD_REAR2_SINX_DIFF2"},
	{0xEA, "OIS_CMD_REAR2_SINY_DIFF1"},
	{0xEB, "OIS_CMD_REAR2_SINY_DIFF2"},
	{0xEC, "OIS_CMD_GYRO_VAL_X"},
	{0xED, "OIS_CMD_GYRO_LOG_X"},
	{0xEE, "OIS_CMD_GYRO_VAL_Y"},
	{0xEF, "OIS_CMD_GYRO_LOG_Y"},
	{0xF0, "OIS_CMD_GYRO_VAL_Z"},
	{0xF1, "OIS_CMD_GYRO_LOG_Z"},
	{0xF8, "OIS_CMD_HW_VERSION"},
	{0x100, "OIS_CMD_BYPASS_DEVICE_ID1"},
	{0x101, "OIS_CMD_BYPASS_DEVICE_ID2"},
	{0x102, "OIS_CMD_BYPASS_REG_ADD1"},
	{0x103, "OIS_CMD_BYPASS_REG_ADD2"},
	{0x104, "OIS_CMD_BYPASS_REG_SIZE"},
	{0x105, "OIS_CMD_BYPASS_DATA_SIZE"},
	{0x106, "OIS_CMD_BYPASS_DATA_TRANSFER"},
	{0x107, "OIS_CMD_BYPASS_DATA_TRANSFER2"},
	{0x238, "OIS_CMD_FADE_UP1"},
	{0x239, "OIS_CMD_FADE_UP2"},
	{0x23A, "OIS_CMD_FADE_DOWN1"},
	{0x23B, "OIS_CMD_FADE_DOWN2"},
	{0x240, "OIS_CMD_GYRO_POLA_X"},
	{0x241, "OIS_CMD_GYRO_POLA_Y"},
	{0x242, "OIS_CMD_GYRO_ORIENT"},
	{0x248, "OIS_CMD_RAW_DEBUG_X1"},
	{0x249, "OIS_CMD_RAW_DEBUG_X2"},
	{0x24A, "OIS_CMD_RAW_DEBUG_Y1"},
	{0x24B, "OIS_CMD_RAW_DEBUG_Y2"},
	{0x24C, "OIS_CMD_RAW_DEBUG_Z1"},
	{0x24D, "OIS_CMD_RAW_DEBUG_Z2"},
	{0x24E, "OIS_CMD_READ_GYRO_NOISE_X1"},
	{0x24F, "OIS_CMD_READ_GYRO_NOISE_X2"},
	{0x250, "OIS_CMD_READ_GYRO_NOISE_Y1"},
	{0x251, "OIS_CMD_READ_GYRO_NOISE_Y2"},
	{0x254, "OIS_CMD_REAR_XGG1"},
	{0x255, "OIS_CMD_REAR_XGG2"},
	{0x256, "OIS_CMD_REAR_XGG3"},
	{0x257, "OIS_CMD_REAR_XGG4"},
	{0x258, "OIS_CMD_REAR_YGG1"},
	{0x259, "OIS_CMD_REAR_YGG2"},
	{0x25A, "OIS_CMD_REAR_YGG3"},
	{0x25B, "OIS_CMD_REAR_YGG4"},
	{0x348, "OIS_CMD_ANGLE_COMP1"},
	{0x349, "OIS_CMD_ANGLE_COMP2"},
	{0x34A, "OIS_CMD_ANGLE_COMP3"},
	{0x34B, "OIS_CMD_ANGLE_COMP4"},
	{0x3D8, "OIS_CMD_ANGLE_COMP5"},
	{0x3D9, "OIS_CMD_ANGLE_COMP6"},
	{0x3DA, "OIS_CMD_ANGLE_COMP7"},
	{0x3DB, "OIS_CMD_ANGLE_COMP8"},
	{0x440, "OIS_CMD_ENABLE_DUALCAL"},
	{0x442, "OIS_CMD_XCOEF_M1_1"},
	{0x443, "OIS_CMD_XCOEF_M1_2"},
	{0x444, "OIS_CMD_YCOEF_M1_1"},
	{0x445, "OIS_CMD_YCOEF_M1_2"},
	{0x446, "OIS_CMD_XCOEF_M2_1"},
	{0x447, "OIS_CMD_XCOEF_M2_2"},
	{0x448, "OIS_CMD_YCOEF_M2_1"},
	{0x449, "OIS_CMD_YCOEF_M2_2"},
	{0x44A, "OIS_CMD_XCOEF_M3_1"},
	{0x44B, "OIS_CMD_XCOEF_M3_2"},
	{0x44C, "OIS_CMD_YCOEF_M3_1"},
	{0x44D, "OIS_CMD_YCOEF_M3_2"},
	{0x514, "OIS_CMD_REAR3_XGG1"},
	{0x515, "OIS_CMD_REAR3_XGG2"},
	{0x516, "OIS_CMD_REAR3_XGG3"},
	{0x517, "OIS_CMD_REAR3_XGG4"},
	{0x518, "OIS_CMD_REAR3_YGG1"},
	{0x519, "OIS_CMD_REAR3_YGG2"},
	{0x51A, "OIS_CMD_REAR3_YGG3"},
	{0x51B, "OIS_CMD_REAR3_YGG4"},
	{0x54E, "OIS_CMD_GYRO_POLA_X_M3"},
	{0x54F, "OIS_CMD_GYRO_POLA_Y_M3"},
	{0x551, "OIS_CMD_HALL_VALID_NUMBER"},
	{0x552, "OIS_CMD_GYRO_POLA_X_M2"},
	{0x553, "OIS_CMD_GYRO_POLA_Y_M2"},
	{0x554, "OIS_CMD_REAR2_XGG1"},
	{0x555, "OIS_CMD_REAR2_XGG2"},
	{0x556, "OIS_CMD_REAR2_XGG3"},
	{0x557, "OIS_CMD_REAR2_XGG4"},
	{0x558, "OIS_CMD_REAR2_YGG1"},
	{0x559, "OIS_CMD_REAR2_YGG2"},
	{0x55A, "OIS_CMD_REAR2_YGG3"},
	{0x55B, "OIS_CMD_REAR2_YGG4"},
	{0x560, "OIS_CMD_VDIS_TIME_STAMP_1"},
	{0x561, "OIS_CMD_VDIS_TIME_STAMP_2"},
	{0x562, "OIS_CMD_VDIS_TIME_STAMP_3"},
	{0x563, "OIS_CMD_VDIS_TIME_STAMP_4"},
	{0x564, "OIS_CMD_VDIS_X1_ANGVEL_1"},
	{0x565, "OIS_CMD_VDIS_X1_ANGVEL_2"},
	{0x566, "OIS_CMD_VDIS_Y1_ANGVEL_1"},
	{0x567, "OIS_CMD_VDIS_Y1_ANGVEL_2"},
	{0x568, "OIS_CMD_VDIS_Z1_ANGVEL_1"},
	{0x569, "OIS_CMD_VDIS_Z1_ANGVEL_2"},
	{0x56A, "OIS_CMD_VDIS_X2_ANGVEL_1"},
	{0x56B, "OIS_CMD_VDIS_X2_ANGVEL_2"},
	{0x56C, "OIS_CMD_VDIS_Y2_ANGVEL_1"},
	{0x56D, "OIS_CMD_VDIS_Y2_ANGVEL_2"},
	{0x56E, "OIS_CMD_VDIS_Z2_ANGVEL_1"},
	{0x56F, "OIS_CMD_VDIS_Z2_ANGVEL_2"},
	{0x570, "OIS_CMD_VDIS_X3_ANGVEL_1"},
	{0x571, "OIS_CMD_VDIS_X3_ANGVEL_2"},
	{0x572, "OIS_CMD_VDIS_Y3_ANGVEL_1"},
	{0x573, "OIS_CMD_VDIS_Y3_ANGVEL_2"},
	{0x574, "OIS_CMD_VDIS_Z3_ANGVEL_1"},
	{0x575, "OIS_CMD_VDIS_Z3_ANGVEL_2"},
	{0x576, "OIS_CMD_VDIS_X4_ANGVEL_1"},
	{0x577, "OIS_CMD_VDIS_X4_ANGVEL_2"},
	{0x578, "OIS_CMD_VDIS_Y4_ANGVEL_1"},
	{0x579, "OIS_CMD_VDIS_Y4_ANGVEL_2"},
	{0x57A, "OIS_CMD_VDIS_Z4_ANGVEL_1"},
	{0x57B, "OIS_CMD_VDIS_Z4_ANGVEL_2"}
};

#define MCU_ERR_PRINT(fmt, args...) \
	pr_err("[@][OIS_MCU] " fmt, ##args)

#define MCU_GET_ERR_PRINT(idx) \
	MCU_ERR_PRINT("%s: get fail (%s:%X)", __func__, ois_mcu_regs[idx].reg_name, ois_mcu_regs[idx].offset)
#define MCU_SET_ERR_PRINT(idx) \
	MCU_ERR_PRINT("%s: set fail (%s:%X)", __func__, ois_mcu_regs[idx].reg_name, ois_mcu_regs[idx].offset)

#define	SWAP32(x)	((((x) & 0xff000000) >> 24) | \
				(((x) & 0x00ff0000) >> 8) | \
				(((x) & 0x0000ff00) << 8) | \
				(((x) & 0x000000ff) << 24))
#define	RND_DIV(num, den) ((num > 0) ? (num + (den >> 1)) / den : (num - (den >> 1)) / den)
#define	SCALE				10000
#define	Coef_angle_max		3500		// unit : 1/SCALE, OIS Maximum compensation angle, 0.35*SCALE
#define	SH_THRES			798000		// unit : 1/SCALE, 39.9*SCALE
#define	Gyrocode			1000			// Gyro input code for 1 angle degree

void is_mcu_fw_update(struct is_core *core);
struct i2c_client *is_mcu_i2c_get_client(struct is_core *core);
bool is_mcu_halltest_aperture(struct v4l2_subdev *subdev, u16 *hall_value);
void is_mcu_set_aperture_onboot(struct is_core *core);
#endif /* IS_MCU_H_ */
